1
00:00:00,560 --> 00:00:06,680
So now we're going to write our method to remove an edge that's going to look like this if we remove

2
00:00:06,680 --> 00:00:11,450
an edge between A and B and the diagram at the bottom, it's going to look like that.

3
00:00:12,170 --> 00:00:17,930
And in the adjacency list on top, removing the edge is going to look like this.

4
00:00:19,140 --> 00:00:24,900
So let's move this down to the bottom, and we'll bring these back, and then we'll write the code to

5
00:00:24,900 --> 00:00:25,710
remove those.

6
00:00:26,890 --> 00:00:29,100
We'll start our coat out like this.

7
00:00:29,170 --> 00:00:34,210
Remove Edge will pass at the two vertices that were removing an edge between.

8
00:00:35,200 --> 00:00:41,230
So with this next line of code, I'm going to do the same thing we did in the last video where we break

9
00:00:41,230 --> 00:00:43,270
the line of code into two parts.

10
00:00:44,110 --> 00:00:49,510
So first, we're going to say adjacency list dot get Vertex one.

11
00:00:49,990 --> 00:00:52,120
So Vertex one is a.

12
00:00:52,660 --> 00:00:56,140
And when we do the get it returns the array list.

13
00:00:56,710 --> 00:01:05,350
And because of that, we can now run methods on that array list so we can say Dot remove Vertex two,

14
00:01:05,350 --> 00:01:07,480
and that removes that.

15
00:01:08,430 --> 00:01:14,430
Now we'll do the same thing going the other way, and in this case will remove Vertex one.

16
00:01:15,520 --> 00:01:18,970
Like that, and that removes the edge.

17
00:01:20,020 --> 00:01:26,110
And just like we had in the ad edge method, we couldn't add an edge unless both vertices existed.

18
00:01:26,440 --> 00:01:33,400
Similarly, with this method, remove edge, both of the vertices have to exist, so we'll have to wrap

19
00:01:33,400 --> 00:01:34,870
these two lines of code.

20
00:01:35,950 --> 00:01:43,420
And this if statement that checks to make sure both of those vertices exist, it is only then that we

21
00:01:43,420 --> 00:01:51,520
can run the next two lines and after we run, those will return true if the conditional in the if statement

22
00:01:51,730 --> 00:01:54,490
equates to false will skip the if statement.

23
00:01:55,510 --> 00:01:58,270
And we will return false.

24
00:01:59,610 --> 00:02:05,730
So that is our entire method for removing Edge will look at this in a moment in intelligence.

25
00:02:06,000 --> 00:02:15,210
And when we do, we'll create this graph and then we'll run remove edge between A and B, and then the

26
00:02:15,210 --> 00:02:17,010
graph will look like this.

27
00:02:18,030 --> 00:02:21,810
So now let's flip over to Intel AJ and take a look at this.

28
00:02:23,320 --> 00:02:30,100
So there is our remove edge method that we just created there added to our graph class.

29
00:02:31,100 --> 00:02:36,290
And I'll come up here to our main class that has our main method.

30
00:02:37,190 --> 00:02:41,510
And with this line here, we'll create a new graph called my graph.

31
00:02:41,900 --> 00:02:48,530
And then with these three lines here will create the three vertices A, B and C, and then with these

32
00:02:48,530 --> 00:02:52,970
three lines will connect all three of the vertices to each other.

33
00:02:53,450 --> 00:02:56,150
And then with this line, we will print that out.

34
00:02:57,090 --> 00:02:58,140
So I'll run this.

35
00:02:59,560 --> 00:03:06,820
So you can see up here that we have three vertices A, B and C, and they all have edges with each other.

36
00:03:07,860 --> 00:03:10,020
Someone to come over here and add a line.

37
00:03:11,930 --> 00:03:18,770
So this line here will remove the edge between the A and the B vertices, and then with this line here,

38
00:03:18,770 --> 00:03:20,330
we will print that out.

39
00:03:20,840 --> 00:03:22,580
So I'll run this.

40
00:03:23,940 --> 00:03:30,330
And you can see that are a and B vertices no longer have edges with each other.

41
00:03:31,790 --> 00:03:35,600
And that is our method for removing Edge.
